Begin Data Section
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 115
31 101
32 97
33 114
34 99
35 104
36 46
37 116
38 120
39 116
40 0
41 115
42 111
43 114
44 116
45 50
46 46
47 116
48 120
49 116
50 0
51 0
52 0
53 0
54 0
55 0
56 0
57 0
58 0
59 0
60 263    # Numbers to be searched starts at index 60
61 249
62 257
63 226
64 79
65 276
66 97
67 230
68 208
69 178
70 240
71 156
72 286
73 131
74 163
75 194
76 71
77 79
78 240
79 66
80 161
81 199
82 204
83 172
84 262
85 159
86 221
87 118
88 139
89 257
90 225
91 221
92 230
93 67
94 91
95 139
96 71
97 271
98 141
99 267
100 180
101 69
102 239
103 228
104 178
105 290
106 287
107 112
108 62
109 297
110 143
111 70
112 206
113 187
114 94
115 163
116 118
117 223
118 63
119 153
120 130
121 147
122 191
123 182
124 62
125 175
126 261
127 289
128 65
129 251
130 103
131 54
132 282
133 226
134 244
135 280
136 142
137 222
138 119
139 281
140 297
141 127
142 248
143 262
144 61
145 156
146 234
147 284
148 109
149 188
150 288
151 154
152 131
153 270
154 163
155 186
156 151
157 300
158 98
159 82
160 0
161 0
End Data Section
Begin Instruction Section
0 SET 3 25   	# i = 10
1 SET 0 26		# sum = 0
2 CALL FORK
3 ADDI 25 26 	# sum = sum + i
4 ADD -1 25 	# i = i – 1
5 JIF 25 7 		# Go to 7 if i <= 0
6 SET 3 0 		# Go to 3 – remember address 0 is the program counter
7 CALL PRN 26	# print the result
8 JIF 4 10		# if reg[4] <= 0 then this is child. jump 10
9 CALL EXEC 41	# reg[4] > 0 then this is parent. call 'sort2.txt'
10 CALL EXEC 30 # in child, call 'search' program.
11 HLT 			# end of program, the result is in memory address 51 (sum)
End Instruction Section
